{"version":3,"file":"index.js","sources":["../src/helpers.js","../src/webSocket.js","../src/index.js"],"sourcesContent":["const NAME = '%c Pagar.Me Bifrost ';\nconst BACKGROUND = 'background:#f26722 ; padding: 2px; border-radius: 2px;  color: #fff ';\n\nexport function required(name, param) {\n  if (param === undefined) {\n    throw new Error(`Parâmetro obrigatório ${name} não declarado.`);\n  }\n\n  return param;\n}\n\nexport function logInfo(msg) {\n  console.log(NAME, BACKGROUND, msg); // eslint-disable-line no-console\n}\n\nexport function logError(msg) {\n  console.error(NAME, BACKGROUND, msg); // eslint-disable-line no-console\n}\n\n/**\n * Add spaces to match the max screen length\n * @param {string} text\n * @param {number} maxChar\n * @returns {string}\n */\nexport function addSpaces(text, maxChar) {\n  return text\n    .split('')\n    .concat(...Array(maxChar).fill(' '))\n    .slice(0, maxChar)\n    .join('');\n}\n\nexport default {\n  required,\n  logInfo,\n  logError,\n  addSpaces,\n};\n","/* eslint-disable no-underscore-dangle */\nimport { logInfo, required } from './helpers';\n\nconst privateVariables = {\n  request: {\n    listDevices: 1,\n    initialize: 2,\n    process: 4,\n    finish: 5,\n    displayMessage: 6,\n    status: 7,\n    closeContext: 8,\n  },\n  response: {\n    unknownCommand: 0,\n    devicesListed: 1,\n    initialized: 2,\n    alreadyInitialized: 3,\n    processed: 4,\n    finished: 5,\n    messageDisplayed: 6,\n    status: 7,\n    contextClosed: 8,\n    error: 9,\n  },\n  paymentMethods: {\n    credit: 1,\n    debit: 2,\n  },\n  errorStrings: {\n    errorContextString: 'Device already in use by context ',\n    errorInitialize: 'An error has occured with the [Initialize] request. See the log and contact the support.',\n    errorOperationErrored: 'Transaction Errored',\n    errorOperationFailed: 'Error: 43',\n    errorOperationCanceled: 'Transaction Canceled',\n    catastroficError: 'Error: 14',\n  },\n  ws: null,\n  timeout: null,\n  close: true,\n  timeoutConn: null,\n};\n\nfunction _connect(host, payload) {\n  if (privateVariables.ws === null) {\n    privateVariables.ws = new WebSocket(host);\n  } else if (privateVariables.ws.readyState === 2 || privateVariables.ws.readyState === 3) {\n    _disconnect();\n    privateVariables.ws = new WebSocket(host);\n  }\n\n  return new Promise((resolve, reject) => {\n    try {\n      _timeout();\n\n      const sendRequest = () => {\n        _clearTimeout();\n        privateVariables.ws.send(JSON.stringify(payload));\n        _timeout(60000);\n      }\n\n      if (privateVariables.ws.readyState === 0) {\n        privateVariables.ws.onopen = () => {\n          sendRequest();\n        };\n      } else if (privateVariables.ws.readyState === 1) {\n        sendRequest();\n      }\n\n      privateVariables.ws.onmessage = (evtMsg) => {\n        _clearTimeout();\n        resolve(JSON.parse(evtMsg.data));\n      };\n\n      privateVariables.ws.onerror = (evtError) => {\n        _clearTimeout();\n        if (evtError) reject(evtError);\n      };\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\nfunction _disconnect() {\n  privateVariables.ws.close();\n  privateVariables.ws = null;\n}\n\nfunction _clearTimeout() {\n  privateVariables.close = false;\n  clearTimeout(privateVariables.timeoutConn);\n}\n\nfunction _timeout(time = 10000) {\n  privateVariables.close = true;\n  privateVariables.timeoutConn = setTimeout(() => {\n    if (privateVariables.close) {\n      privateVariables.ws.close();\n    } else {\n      _clearTimeout();\n    }\n  }, time);\n}\n\nclass BifrostWebSocket {\n  constructor({ contextId, baudRate, debug, host }) {\n    this.debug = debug || false;\n    this.contextId = required('contextId', contextId);\n    this.baudRate = baudRate || 115200;\n    this._connected = false;\n    this.devices = [];\n    this._host = host || 'wss://localhost:2000/mpos';\n    this._amount = 0;\n    this._method = '';\n    this.lastRequest = null;\n  }\n\n  debugLog(message) {\n    if (this.debug) {\n      logInfo(message);\n    }\n  }\n\n  classError(message) {\n    this.debugLog((typeof message === 'object') ? message.text : message);\n    throw new Error(message);\n  }\n\n  get amount() {\n    return this._amount; // eslint-disable-line\n  }\n\n  get connected() {\n    return (this._connected);\n  }\n\n  set amount(value) {\n    if (typeof value === 'number' && value <= 0) {\n      throw new Error('Não é possível definir um valor menor ou igual a zero.');\n    } else {\n      this._amount = parseFloat(value) * 100;\n    }\n  }\n\n  get method() {\n    return this._method;\n  }\n\n  set method(value) {\n    if (typeof value === 'string') {\n      if (Object.keys(privateVariables.paymentMethods)\n        .includes(value)) {\n        this._method = value;\n      }\n    } else if (typeof value === 'number') {\n      if (privateVariables.paymentMethods.find(p => p === value)) {\n        this._method = Object.keys(privateVariables.paymentMethods)\n          .find(k => privateVariables.paymentMethods[k] === value);\n      }\n    } else {\n      throw new Error('Método de pagamento não permitido.');\n    }\n  }\n\n  defineRequest(value) {\n    if (value === undefined) this.lastRequest = null;\n    if (this.lastRequest !== null) {\n      this.classError('Não é possível fazer requisições asíncronas, termine uma ação antes de executar a outra.');\n    }\n\n    if (typeof value === 'number') this.lastRequest = value;\n  }\n\n  /**\n   * Terminate the context of the PinPad device\n   * @param {string} contextId = null - Optional ContextId to be terminated\n   * @returns {Promise<*>}\n   */\n  async closePinPadContext(contextId = this.contextId) {\n    try {\n      this.debugLog('Fechando contexto do Serviço Bifrost.');\n      this.defineRequest(privateVariables.request.closeContext);\n      await _connect(this._host, {\n        request_type: privateVariables.request.closeContext,\n        context_id: contextId,\n      });\n      this._connected = false;\n      this.defineRequest();\n      return Promise.resolve(true);\n    } catch (error) {\n      this.defineRequest();\n      return Promise.reject(error);\n    } finally {\n      await _disconnect();\n    }\n  }\n\n  /**\n   * @typedef {object} PinPadDevice\n   * @property {string} id - Device ID\n   * @property {number} kind - Device Kind\n   * @property {string} manufacturer - Device Manufacturer\n   * @property {string} name - Device name\n   * @property {string} port - Device Port\n   */\n  /**\n   * Get the connected devices on the serial port (COM)\n   * @returns {Promise<Array.<PinPadDevice>>}\n   */\n  async getPinPadDevices() {\n    try {\n      this.debugLog('Buscando lista de dispositivos do sistema.');\n      this.defineRequest(privateVariables.request.listDevices);\n      const responseData = await _connect(this._host, {\n        request_type: privateVariables.request.listDevices,\n        context_id: this.contextId,\n      });\n      this.debugLog(responseData);\n      this.devices = responseData.device_list;\n      this.defineRequest();\n      return Promise.resolve(this.devices);\n    } catch (error) {\n      this.defineRequest();\n      return Promise.reject(error);\n    }\n  }\n\n  /**\n   * @typedef {object} PinPadInitializerParameters\n   * @property{string} encryptionKey\n   * @property {number} simpleInitialize = null\n   * @property {number} timeoutMilliseconds = null\n   */\n  /**\n   * Start the PinPan hardware\n   * @param {PinPadInitializerParameters} params\n   * @param {number} deviceIndex = 0 - Index of the device in the devices Array.\n   */\n  async initialize(params, deviceIndex = 0) {\n    try {\n      this.debugLog(`Conectando ao PinPad ${this.devices[deviceIndex].id}.`);\n      this.defineRequest(privateVariables.request.initialize);\n      const response = await _connect(this._host, {\n        request_type: privateVariables.request.initialize,\n        context_id: this.contextId,\n        initialize: {\n          device_id: this.devices[deviceIndex].id,\n          encryption_key: params.encryptionKey,\n          baud_rate: this.baudRate,\n          simple_initialize: params.simpleInitialize,\n          timeout_milliseconds: params.timeoutMilliseconds,\n        },\n      });\n      if (this.lastRequest === privateVariables.request.initialize) {\n        this.defineRequest();\n        if (response.response_type === privateVariables.response.initialized) {\n          this._connected = true;\n          return this.debugLog(`PinPad ${this.devices[deviceIndex].id} inicializado com sucesso.`);\n        }\n\n        if (response.response_type === privateVariables.response.alreadyInitialized) {\n          this.debugLog('Serviço Bifrost já inicializado, reiniciando a conexão.');\n          await this.closePinPadContext(response.context_id);\n          await this.initialize({\n            encryptionKey: params.encryptionKey,\n            baud_rate: this.baudRate,\n            simpleInitialize: params.simpleInitialize,\n            timeoutMilliseconds: params.timeoutMilliseconds,\n          }, 0);\n          return false;\n        }\n\n        if (response.response_type === privateVariables.response.error && privateVariables.errorStrings.errorInitialize) {\n          const nextDevice = (deviceIndex + 1);\n\n          if (nextDevice > this.devices.length) {\n            await _disconnect();\n            this.classError('Não foi possível inicial a conexão com nenhum dispositivo.');\n          } else {\n            this.debugLog('Dispositivo selecionado não é válido, inicializando novamente com próximo dispositivo da lista.');\n            await this.initialize({\n              encryptionKey: params.encryptionKey,\n              baud_rate: this.baudRate,\n              simpleInitialize: params.simpleInitialize,\n              timeoutMilliseconds: params.timeoutMilliseconds,\n            }, nextDevice);\n            return false;\n          }\n        }\n\n        if (response.error === privateVariables.errorStrings.catastroficError) {\n          this.classError('Erro catastrófico no sistema. Por favor, reinicialize o PinPad e o Serviço do Bifrost');\n          _disconnect();\n          return false;\n        }\n\n        if (response.error && response.error.includes(privateVariables.errorStrings.errorContextString)) {\n          this.debugLog('Serviço Bifrost com contexto diferente do definido na classe.');\n          const context = response.error.split(privateVariables.errorStrings.errorContextString)[1];\n          if (await this.closePinPadContext(context)) {\n            await this.initialize({\n              encryptionKey: params.encryptionKey,\n              baud_rate: this.baudRate,\n              simpleInitialize: params.simpleInitialize,\n              timeoutMilliseconds: params.timeoutMilliseconds,\n            }, 0);\n          }\n\n          return false;\n        }\n      }\n      return response;\n    } catch (error) {\n      return Promise.reject(error);\n    } finally {\n      this.defineRequest();\n    }\n  }\n\n  /**\n   * @typedef {object} BifrostServiceStatus\n   * @property {boolean} connected - Is device connected\n   * @property {string} contextId - Device Context\n   * @property {string} connectedDeviceId - Connected Device Id\n   */\n  /**\n   * Get the Bifrost Service Status\n   * @returns {Promise<BifrostServiceStatus>}\n   */\n  async getPinPanStatus() {\n    try {\n      this.debugLog('Buscando status do serviço Bifrost.');\n      this.defineRequest(privateVariables.request.status);\n      const responseData = await _connect(this._host, {\n        request_type: privateVariables.request.status,\n        context_id: this.contextId,\n      });\n      logInfo(responseData);\n      return Promise.resolve({\n        connected: !!responseData.status.code,\n        contextId: responseData.context_id,\n        connectedDeviceId: responseData.status.connected_device_id,\n      });\n    } catch (error) {\n      return Promise.reject(error);\n    } finally {\n      this.defineRequest();\n    }\n  }\n\n  /**\n   * Display a message on the PinPad Device\n   * @param message\n   * @returns {Promise<*>}\n   */\n  async displayMessageOnPinPadScreen(message) {\n    try {\n      this.debugLog(`Mostrando \"${message}\" no display do PinPad.`);\n      this.defineRequest(privateVariables.request.displayMessage);\n      const responseData = await _connect(this._host, {\n        request_type: privateVariables.request.displayMessage,\n        context_id: this.contextId,\n        display_message: {\n          message,\n        },\n      });\n      return Promise.resolve(responseData);\n    } catch (error) {\n      return Promise.reject(error);\n    } finally {\n      this.defineRequest();\n    }\n  }\n\n  /**\n   * @typedef {object} PaymentStartObject\n   * @property {number} amount\n   * @property {string} method = 'credit'|'debit'\n   */\n  /**\n   * Start the payment process by setting the amount and method.\n   * @param {PaymentStartObject} params\n   */\n  startPayment(params) {\n    try {\n      this.amount = params.amount;\n      this.method = params.method || privateVariables.paymentMethods.credit;\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  /**\n   * @typedef {object} PinPadProcessedCardReturn\n   * @property {string} card_hash\n   * @property {string} card_holder_name\n   * @property {number} error_code\n   * @property {boolean} is_online_pin\n   * @property {number} payment_method\n   * @property {number} status\n   */\n  /**\n   * Send the payment request to the PinPad and start the\n   * payment process of it.\n   * @returns {Promise<Object.<PinPadProcessedCardReturn>>}\n   */\n  async startPaymentProcess() {\n    try {\n      this.debugLog(`Iniciando processo de pagamento. Venda via ${this.method}, valor ${this.amount / 100}`);\n      this.defineRequest(privateVariables.request.process);\n\n      const response = await _connect(this._host, {\n        request_type: privateVariables.request.process,\n        context_id: this.contextId,\n        process: {\n          amount: this.amount,\n          magstripe_payment_method: this.method,\n        },\n      });\n\n      if (this.lastRequest === privateVariables.request.process) {\n        if (response.error === privateVariables.errorStrings.errorOperationCanceled) {\n          const error = {\n            text: 'Operação cancelada pelo usuário.',\n            type: 'cardCanceled',\n          };\n          this.debugLog(error.text);\n          return Promise.reject(error);\n        }\n\n        if (\n          response.error === privateVariables.errorStrings.errorOperationErrored\n          || response.error === privateVariables.errorStrings.errorOperationFailed\n        ) {\n          const error = {\n            text: 'Aconteceu algum erro na operação, tente novamente.',\n            type: 'operationError',\n          };\n          this.debugLog(error.text);\n          return Promise.reject(error);\n        }\n\n        if (response.response_type === privateVariables.response.processed) {\n          return Promise.resolve(response.process);\n        }\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    } finally {\n      this.defineRequest();\n    }\n  }\n\n  /**\n   * Finish the payment process of the PinPad\n   * @param {string} code\n   * @param {string} emvData\n   * @returns {Promise<*>}\n   */\n  async finishPaymentProcess(code, emvData) {\n    try {\n      this.debugLog(`Finalizando a venda via ${this.method}`);\n      this.defineRequest(privateVariables.request.finish);\n      return await _connect(this._host, {\n        request_type: privateVariables.request.finish,\n        context_id: this.contextId,\n        finish: {\n          success: !!(code && emvData),\n          response_code: code || '0000',\n          emv_data: emvData || '000000000.0000',\n        },\n      });\n    } catch (error) {\n      return Promise.reject(error);\n    } finally {\n      this.defineRequest();\n    }\n  }\n}\n\nexport default BifrostWebSocket;\n","/* eslint-disable no-underscore-dangle */\nimport { required, logError, addSpaces } from './helpers';\nimport BifrostWebSocket from './webSocket';\n\n/**\n * Show the error on not connected PinPad\n */\nfunction notConnected() {\n  throw new Error('PinPad não foi inicializado. Por favor, inicie o PinPad antes de executar outro comando.');\n}\n\n/**\n * @class PagarMeTEF\n * @constructor PagarMeConstructor\n */\nclass PagarMeBifrost {\n  /**\n   * Class Constructor\n   * @param {Object.<PagarMeConstructor>} params\n   */\n  /**\n   * @typedef {Object} PagarMeConstructor\n   * @property {boolean} debug\n   * @property {string} host\n   * @property {string} contextId\n   * @property {number} baudRate\n   * @property {string} encryptionKey\n   * @property {number} pinPadMaxCharLine\n   * @property {number} pinPadMaxChar\n   * @property {number} pinPanDisplayLines\n   */\n  constructor(params) {\n    try {\n      this.baudRate = params.baudRate || 115200;\n      this.contextId = required('contextId', params.contextId);\n      this.encryptionKey = required('encryptionKey', params.encryptionKey);\n      this.pinPadMaxCharLine = params.pinPadMaxCharLine || 16;\n      this.pinPadMaxChar = params.pinPadMaxChar || 32;\n      this.pinPanDisplayLines = params.pinPanDisplayLines || 2;\n\n      const constructorOptions = {\n        debug: params.debug || false,\n        contextId: this.contextId,\n        host: params.host || 'wss://localhost:2000/mpos',\n      };\n\n      this.__bifrost__ = new BifrostWebSocket(constructorOptions);\n    } catch (error) {\n      logError(error, true);\n    }\n  }\n\n  get connected() {\n    return this.__bifrost__.connected;\n  }\n\n  /**\n   * Initialize the PinPad\n   * @returns {Promise<boolean>}\n   */\n  async initialize() {\n    try {\n      await this.__bifrost__.getPinPadDevices();\n      await this.__bifrost__.initialize({ encryptionKey: this.encryptionKey });\n      return Promise.resolve(true);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n\n  /**\n   * Terminate the PinPad\n   * @returns {Promise<Boolean>}\n   */\n  async terminate() {\n    return new Promise((resolve, reject) => {\n      if (this.connected) {\n        this.__bifrost__.closePinPadContext()\n          .then(() => {\n            resolve(true);\n          })\n          .catch((e) => {\n            reject(e);\n          });\n      } else {\n        notConnected();\n      }\n    });\n  }\n\n  /**\n   * Restart the PinPad\n   * @returns {Promise<boolean>}\n   */\n  async restart() {\n    try {\n      await this.terminate();\n      return this.initialize();\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n\n  /**\n   * Get the PinPad Status\n   * @returns {Promise<Object.<BifrostServiceStatus>>}\n   */\n  async status() {\n    try {\n      if (!this.connected) notConnected();\n      return this.__bifrost__.getPinPanStatus();\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n\n  /**\n   * Display a message on the PinPad\n   * @param {string|array} message - A message string or an array of messages.\n   * @returns {Promise<String>}\n   */\n  async showMessage(message) {\n    try {\n      if (!this.connected) notConnected();\n      const tefMaxCharLine = this.pinPadMaxCharLine;\n      const tefMaxChar = this.pinPadMaxChar;\n      let formattedMessage = '';\n\n      if (Array.isArray(message)) {\n        formattedMessage = message\n          .slice(0, this.pinPanDisplayLines)\n          .map(m => addSpaces(m, tefMaxCharLine))\n          .join('');\n      }\n\n      if (typeof message === 'string') {\n        formattedMessage = addSpaces(message, tefMaxChar);\n      }\n\n      await this.__bifrost__.displayMessageOnPinPadScreen(formattedMessage);\n      return Promise.resolve(formattedMessage);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n\n  /**\n   * Start the payment process\n   * @param {number} amount\n   * @param {string|number} method = 'credit'|'debit'|1|2\n   * @returns {Promise<Object.<PinPadProcessedCardReturn>>}\n   */\n  async payment(amount, method) {\n    try {\n      if (!this.connected) notConnected();\n      this.__bifrost__.startPayment({ amount, method });\n      const processedPayment = await this.__bifrost__.startPaymentProcess();\n\n      return Promise.resolve(processedPayment);\n    } catch (error) {\n      logError(error);\n      await this.showMessage(error.text);\n      setTimeout(async () => {\n        await this.finish();\n        await this.terminate();\n        setTimeout(async () => {\n          await this.initialize();\n        }, 2000);\n      }, 2000);\n      return Promise.reject(error);\n    }\n  }\n\n  /**\n   * @typedef {object} PinPadFinishParameters\n   * @property {number} timeout - Timeout in MS between the execution of messages\n   * @property {string|array} messages - An string or an Array of messages\n   * @property {string} code\n   * @property {string} emvData\n   */\n  /**\n   * Finish the PinPad payment process.\n   * @param {PinPadFinishParameters} params\n   * @returns {Promise<*>}\n   */\n  async finish(params = {}) {\n    try {\n      if (!this.connected) notConnected();\n      const code = params.code || '';\n      const emvData = params.emvData || '';\n      const timeOut = params.timeout || 2000;\n      const messages = params.messages || null;\n      const processed = await this.__bifrost__.finishPaymentProcess(code, emvData);\n\n      if (Array.isArray(messages)) {\n        messages.forEach((message, index) => {\n          setTimeout(async () => {\n            await this.showMessage(message);\n          }, timeOut * (index + 1));\n        });\n      }\n\n      if (typeof messages === 'string') {\n        setTimeout(async () => {\n          await this.showMessage(messages);\n        }, timeOut);\n      }\n\n      return Promise.resolve(processed);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n}\n\nexport default PagarMeBifrost;\n"],"names":["NAME","BACKGROUND","required","name","param","undefined","Error","logInfo","msg","console","log","logError","error","addSpaces","text","maxChar","split","concat","Array","fill","slice","join","body","then","result","value","direct","Promise","resolve","f","args","i","arguments","length","apply","this","e","reject","finalizer","bind","thrown","recover","privateVariables","request","listDevices","initialize","process","finish","displayMessage","status","closeContext","response","unknownCommand","devicesListed","initialized","alreadyInitialized","processed","finished","messageDisplayed","contextClosed","paymentMethods","credit","debit","errorStrings","errorContextString","errorInitialize","errorOperationErrored","errorOperationFailed","errorOperationCanceled","catastroficError","ws","timeout","close","timeoutConn","_connect","host","payload","WebSocket","readyState","_disconnect","_timeout","sendRequest","_clearTimeout","send","JSON","stringify","onopen","onmessage","evtMsg","parse","data","onerror","evtError","clearTimeout","time","setTimeout","BifrostWebSocket","contextId","baudRate","debug","_connected","devices","_host","_amount","_method","lastRequest","message","debugLog","_typeof","classError","_this","defineRequest","request_type","context_id","_this2","responseData","device_list","params","deviceIndex","_this3","id","device_id","encryption_key","encryptionKey","baud_rate","simple_initialize","simpleInitialize","timeout_milliseconds","timeoutMilliseconds","response_type","closePinPadContext","nextDevice","includes","context","_this4","connected","code","connectedDeviceId","connected_device_id","_this5","display_message","amount","method","_this6","magstripe_payment_method","type","emvData","_this7","success","response_code","emv_data","parseFloat","Object","keys","find","p","k","notConnected","PagarMeBifrost","pinPadMaxCharLine","pinPadMaxChar","pinPanDisplayLines","constructorOptions","__bifrost__","getPinPadDevices","catch","terminate","getPinPanStatus","tefMaxCharLine","tefMaxChar","formattedMessage","isArray","map","m","displayMessageOnPinPadScreen","startPayment","startPaymentProcess","processedPayment","showMessage","timeOut","messages","finishPaymentProcess","forEach","index"],"mappings":"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"}
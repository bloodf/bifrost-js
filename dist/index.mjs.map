{"version":3,"file":"index.mjs","sources":["../src/helpers.js","../src/webSocket.js","../src/index.js"],"sourcesContent":["const NAME = '%c Pagar.Me Bifrost ';\nconst BACKGROUND = 'background:#f26722 ; padding: 2px; border-radius: 2px;  color: #fff ';\n\nexport function required(name, param) {\n  if (param === undefined) {\n    throw new Error(`Parâmetro obrigatório ${name} não declarado.`);\n  }\n\n  return param;\n}\n\nexport function logInfo(msg) {\n  console.log(NAME, BACKGROUND, msg); // eslint-disable-line no-console\n}\n\nexport function logError(msg) {\n  console.error(NAME, BACKGROUND, msg); // eslint-disable-line no-console\n}\n\n/**\n * Add spaces to match the max screen length\n * @param {string} text\n * @param {number} maxChar\n * @returns {string}\n */\nexport function addSpaces(text, maxChar) {\n  return text\n    .split('')\n    .concat(...Array(maxChar).fill(' '))\n    .slice(0, maxChar)\n    .join('');\n}\n\nexport default {\n  required,\n  logInfo,\n  logError,\n  addSpaces,\n};\n","/* eslint-disable no-underscore-dangle */\nimport WebSocketAsPromised from 'websocket-as-promised';\nimport { required, logError, logInfo } from './helpers';\n\nclass BifrostWebSocket {\n  constructor({ contextId, baudRate, debug, host }) {\n    this.debug = debug || false;\n    this.contextId = required('contextId', contextId);\n    this.baudRate = baudRate || 115200;\n    this._connected = false;\n    this.devices = [];\n    this._host = host || 'wss://localhost:2000/mpos';\n    this.ws = new WebSocketAsPromised(this._host, {\n      packMessage: data => JSON.stringify(data),\n      unpackMessage: message => JSON.parse(message),\n      attachRequestId: (data, requestId) => Object.assign({ request_type: requestId }, data),\n      extractRequestId: data => data && data.response_type,\n    });\n    this._amount = 0;\n    this._method = '';\n    this._wsConnected = false;\n    this.lastRequest = null;\n    this.__response = {\n      unknownCommand: 0,\n      devicesListed: 1,\n      initialized: 2,\n      alreadyInitialized: 3,\n      processed: 4,\n      finished: 5,\n      messageDisplayed: 6,\n      status: 7,\n      contextClosed: 8,\n      error: 9,\n    };\n    this.__request = {\n      listDevices: 1,\n      initialize: 2,\n      process: 4,\n      finish: 5,\n      displayMessage: 6,\n      status: 7,\n      closeContext: 8,\n    };\n    this.__errorContextString = 'Device already in use by context ';\n    this.__errorInitialize = 'An error has occured with the [Initialize] request. See the log and contact the support.';\n    this.__errorOperationErrored = 'Transaction Errored';\n    this.__errorOperationFailed = 'Error: 43';\n    this.__errorOperationCanceled = 'Transaction Canceled';\n    this.__catastroficError = 'Error: 14';\n    this.__paymentMethods = {\n      credit: 1,\n      debit: 2,\n    };\n  }\n\n  debugLog(message) {\n    if (this.debug) {\n      logInfo(message);\n    }\n  }\n\n  classError(message) {\n    this.debugLog((typeof message === 'object') ? message.text : message);\n    throw new Error(message);\n  }\n\n  get amount() {\n    return this._amount; // eslint-disable-line\n  }\n\n  get connected() {\n    return (this._connected && this._wsConnected);\n  }\n\n  set amount(value) {\n    if (typeof value === 'number' && value <= 0) {\n      throw new Error('Não é possível definir um valor menor ou igual a zero.');\n    } else {\n      this._amount = parseFloat(value) * 100;\n    }\n  }\n\n  get method() {\n    return this._method;\n  }\n\n  set method(value) {\n    if (typeof value === 'string') {\n      if (Object.keys(this.__paymentMethods)\n        .includes(value)) {\n        this._method = value;\n      }\n    } else if (typeof value === 'number') {\n      if (this.__paymentMethods.find(p => p === value)) {\n        this._method = Object.keys(this.__paymentMethods)\n          .find(k => this.__paymentMethods[k] === value);\n      }\n    } else {\n      throw new Error('Método de pagamento não permitido.');\n    }\n  }\n\n  defineRequest(value) {\n    if (value === undefined) this.lastRequest = null;\n    if (this.lastRequest !== null) {\n      this.classError('Não é possível fazer requisições asíncronas, termine uma ação antes de executar a outra.');\n    }\n\n    if (typeof value === 'number') this.lastRequest = value;\n  }\n\n  /**\n   * Start the connection to the Bifrost WebSocket\n   * @returns {Promise<boolean>}\n   */\n  async startWsConnection() {\n    try {\n      this.debugLog('Abrindo conexão com o WebSocket.');\n      await this.ws.open();\n      this._wsConnected = true;\n      return true;\n    } catch (error) {\n      logError(error, true);\n      return false;\n    }\n  }\n\n  /**\n   * Terminate the connection to the Bifrost WebSocket\n   * @returns {Promise<void>}\n   */\n  async closeWsConnection() {\n    try {\n      this.debugLog('Fechando conexão com o WebSocket.');\n      await this.ws.close();\n      this._wsConnected = false;\n    } catch (error) {\n      logError(error, true);\n    }\n  }\n\n  /**\n   * Terminate the context of the PinPad device\n   * @param {string} contextId = null - Optional ContextId to be terminated\n   * @returns {Promise<*>}\n   */\n  async closePinPadContext(contextId = this.contextId) {\n    try {\n      this.debugLog('Fechando contexto do Serviço Bifrost.');\n      this.defineRequest(this.__request.closeContext);\n      const responseData = await this.ws.sendRequest({\n        request_type: this.__request.closeContext,\n        context_id: contextId,\n      }, { requestId: this.__request.closeContext });\n      this._connected = false;\n      this.defineRequest();\n      return Promise.resolve(responseData);\n    } catch (error) {\n      this.defineRequest();\n      await this.closeWsConnection();\n      return Promise.reject(error);\n    }\n  }\n\n  /**\n   * @typedef {object} PinPadDevice\n   * @property {string} id - Device ID\n   * @property {number} kind - Device Kind\n   * @property {string} manufacturer - Device Manufacturer\n   * @property {string} name - Device name\n   * @property {string} port - Device Port\n   */\n  /**\n   * Get the connected devices on the serial port (COM)\n   * @returns {Promise<Array.<PinPadDevice>>}\n   */\n  async getPinPadDevices() {\n    try {\n      this.debugLog('Buscando lista de dispositivos do sistema.');\n      this.defineRequest(this.__request.listDevices);\n      const responseData = await this.ws.sendRequest({\n        request_type: this.__request.listDevices,\n        context_id: this.contextId,\n      }, { requestId: this.__request.listDevices });\n      this.debugLog(responseData);\n      this.devices = responseData.device_list;\n      this.defineRequest();\n      return Promise.resolve(this.devices);\n    } catch (error) {\n      this.defineRequest();\n      return Promise.reject(error);\n    }\n  }\n\n  /**\n   * @typedef {object} PinPadInitializerParameters\n   * @property{string} encryptionKey\n   * @property {number} simpleInitialize = null\n   * @property {number} timeoutMilliseconds = null\n   */\n  /**\n   * Start the PinPan hardware\n   * @param {PinPadInitializerParameters} params\n   * @param {number} deviceIndex = 0 - Index of the device in the devices Array.\n   */\n  async initialize(params, deviceIndex = 0) {\n    try {\n      if (!this._wsConnected) await this.startWsConnection();\n      this.debugLog(`Conectando ao PinPad ${this.devices[deviceIndex].id}.`);\n      this.defineRequest(this.__request.initialize);\n      this.ws.sendPacked({\n        request_type: this.__request.initialize,\n        context_id: this.contextId,\n        initialize: {\n          device_id: this.devices[deviceIndex].id,\n          encryption_key: params.encryptionKey,\n          baud_rate: this.baudRate,\n          simple_initialize: params.simpleInitialize,\n          timeout_milliseconds: params.timeoutMilliseconds,\n        },\n      });\n      this.ws.onMessage.addListener(async (message) => {\n        if (this.lastRequest === this.__request.initialize) {\n          this.defineRequest();\n          const response = JSON.parse(message);\n          if (response.response_type === this.__response.initialized) {\n            this._connected = true;\n            this.ws.removeAllListeners();\n            return this.debugLog(`PinPad ${this.devices[deviceIndex].id} inicializado com sucesso.`);\n          }\n\n          if (response.response_type === this.__response.alreadyInitialized) {\n            this.debugLog('Serviço Bifrost já inicializado, reiniciando a conexão.');\n            this.ws.removeAllListeners();\n            await this.closePinPadContext(response.context_id);\n            await this.initialize({\n              encryptionKey: params.encryptionKey,\n              baud_rate: this.baudRate,\n              simpleInitialize: params.simpleInitialize,\n              timeoutMilliseconds: params.timeoutMilliseconds,\n            }, 0);\n            return false;\n          }\n\n          if (response.response_type === this.__response.error && this.__errorInitialize) {\n            const nextDevice = (deviceIndex + 1);\n\n            if (nextDevice > this.devices.length) {\n              await this.closeWsConnection();\n              this.classError('Não foi possível inicial a conexão com nenhum dispositivo.');\n            } else {\n              this.debugLog('Dispositivo selecionado não é válido, inicializando novamente com próximo dispositivo da lista.');\n              this.ws.removeAllListeners();\n              await this.initialize({\n                encryptionKey: params.encryptionKey,\n                baud_rate: this.baudRate,\n                simpleInitialize: params.simpleInitialize,\n                timeoutMilliseconds: params.timeoutMilliseconds,\n              }, nextDevice);\n              return false;\n            }\n          }\n\n          if (response.error === this.__catastroficError) {\n            this.classError('Erro catastrófico no sistema. Por favor, reinicialize o PinPad e o Serviço do Bifrost');\n            this.ws.removeAllListeners();\n            return false;\n          }\n\n          if (response.error && response.error.includes(this.__errorContextString)) {\n            this.debugLog('Serviço Bifrost com contexto diferente do definido na classe.');\n            this.ws.removeAllListeners();\n            const context = response.error.split(this.__errorContextString)[1];\n            if (await this.closePinPadContext(context)) {\n              await this.initialize({\n                encryptionKey: params.encryptionKey,\n                baud_rate: this.baudRate,\n                simpleInitialize: params.simpleInitialize,\n                timeoutMilliseconds: params.timeoutMilliseconds,\n              }, 0);\n            }\n\n            return false;\n          }\n        }\n\n        return message;\n      });\n      return true;\n    } catch (error) {\n      this.defineRequest();\n      return Promise.reject(error);\n    }\n  }\n\n  /**\n   * @typedef {object} BifrostServiceStatus\n   * @property {boolean} connected - Is device connected\n   * @property {string} contextId - Device Context\n   * @property {string} connectedDeviceId - Connected Device Id\n   */\n  /**\n   * Get the Bifrost Service Status\n   * @returns {Promise<BifrostServiceStatus>}\n   */\n  async getPinPanStatus() {\n    try {\n      this.debugLog('Buscando status do serviço Bifrost.');\n      this.defineRequest(this.__request.status);\n      const responseData = await this.ws.sendRequest({\n        request_type: this.__request.status,\n        context_id: this.contextId,\n      }, { requestId: this.__response.status });\n      logInfo(responseData);\n      return Promise.resolve({\n        connected: !!responseData.status.code,\n        contextId: responseData.context_id,\n        connectedDeviceId: responseData.status.connected_device_id,\n      });\n    } catch (error) {\n      this.defineRequest();\n      return Promise.reject(error);\n    }\n  }\n\n  /**\n   * Display a message on the PinPad Device\n   * @param message\n   * @returns {Promise<*>}\n   */\n  async displayMessageOnPinPadScreen(message) {\n    try {\n      this.debugLog(`Mostrando \"${message}\" no display do PinPad.`);\n      this.defineRequest(this.__request.displayMessage);\n      const responseData = await this.ws.sendRequest({\n        request_type: this.__request.displayMessage,\n        context_id: this.contextId,\n        display_message: {\n          message,\n        },\n      }, { requestId: this.__response.messageDisplayed });\n      this.defineRequest();\n      return Promise.resolve(responseData);\n    } catch (error) {\n      this.defineRequest();\n      return Promise.reject(error);\n    }\n  }\n\n  /**\n   * @typedef {object} PaymentStartObject\n   * @property {number} amount\n   * @property {string} method = 'credit'|'debit'\n   */\n  /**\n   * Start the payment process by setting the amount and method.\n   * @param {PaymentStartObject} params\n   */\n  startPayment(params) {\n    try {\n      this.amount = params.amount;\n      this.method = params.method || this.__paymentMethods.credit;\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  /**\n   * @typedef {object} PinPadProcessedCardReturn\n   * @property {string} card_hash\n   * @property {string} card_holder_name\n   * @property {number} error_code\n   * @property {boolean} is_online_pin\n   * @property {number} payment_method\n   * @property {number} status\n   */\n  /**\n   * Send the payment request to the PinPad and start the\n   * payment process of it.\n   * @returns {Promise<Object.<PinPadProcessedCardReturn>>}\n   */\n  async startPaymentProcess() {\n    try {\n      return new Promise((resolve, reject) => {\n        this.debugLog(`Iniciando processo de pagamento. Venda via ${this.method}, valor ${this.amount / 100}`);\n        this.defineRequest(this.__request.process);\n        this.ws.sendPacked({\n          request_type: this.__request.process,\n          context_id: this.contextId,\n          process: {\n            amount: this.amount,\n            magstripe_payment_method: this.method,\n          },\n        });\n        this.ws.onMessage.addListener(async (eventResponse) => {\n          if (this.lastRequest === this.__request.process) {\n            const response = JSON.parse(eventResponse);\n            this.defineRequest();\n            if (response.error === this.__errorOperationCanceled) {\n              const error = {\n                text: 'Operação cancelada pelo usuário.',\n                type: 'cardCanceled',\n              };\n              this.debugLog(error.text);\n              this.ws.removeAllListeners();\n              return reject(error);\n            }\n\n            if (\n              response.error === this.__errorOperationErrored\n              || response.error === this.__errorOperationFailed\n            ) {\n              const error = {\n                text: 'Aconteceu algum erro na operação, tente novamente.',\n                type: 'operationError',\n              };\n              this.debugLog(error.text);\n              this.ws.removeAllListeners();\n              return reject(error);\n            }\n\n            if (response.response_type === this.__response.processed) {\n              this.ws.removeAllListeners();\n              return resolve(response.process);\n            }\n          }\n\n          return eventResponse;\n        });\n      });\n    } catch (error) {\n      this.defineRequest();\n      return Promise.reject(error);\n    }\n  }\n\n  /**\n   * Finish the payment process of the PinPad\n   * @param {string} code\n   * @param {string} emvData\n   * @returns {Promise<*>}\n   */\n  async finishPaymentProcess(code, emvData) {\n    try {\n      this.debugLog(`Finalizando a venda via ${this.method}`);\n      this.defineRequest(this.__request.finish);\n      const process = await this.ws.sendRequest({\n        request_type: this.__request.finish,\n        context_id: this.contextId,\n        finish: {\n          success: !!(code && emvData),\n          response_code: code || '0000',\n          emv_data: emvData || '000000000.0000',\n        },\n      }, { requestId: this.__response.finished });\n      this.defineRequest();\n      return process;\n    } catch (error) {\n      this.defineRequest();\n      return Promise.reject(error);\n    }\n  }\n}\n\nexport default BifrostWebSocket;\n","/* eslint-disable no-underscore-dangle */\nimport { required, logError, addSpaces } from './helpers';\nimport BifrostWebSocket from './webSocket';\n\n/**\n * Show the error on not connected PinPad\n */\nfunction notConnected() {\n  throw new Error('PinPad não foi inicializado. Por favor, inicie o PinPad antes de executar outro comando.');\n}\n\n/**\n * @class PagarMeTEF\n * @constructor PagarMeConstructor\n */\nclass PagarMeBifrost {\n  /**\n   * Class Constructor\n   * @param {Object.<PagarMeConstructor>} params\n   */\n  /**\n   * @typedef {Object} PagarMeConstructor\n   * @property {boolean} debug\n   * @property {string} host\n   * @property {string} contextId\n   * @property {number} baudRate\n   * @property {string} encryptionKey\n   * @property {number} pinPadMaxCharLine\n   * @property {number} pinPadMaxChar\n   * @property {number} pinPanDisplayLines\n   */\n  constructor(params) {\n    try {\n      this.baudRate = params.baudRate || 115200;\n      this.contextId = required('contextId', params.contextId);\n      this.encryptionKey = required('encryptionKey', params.encryptionKey);\n      this.pinPadMaxCharLine = params.pinPadMaxCharLine || 16;\n      this.pinPadMaxChar = params.pinPadMaxChar || 32;\n      this.pinPanDisplayLines = params.pinPanDisplayLines || 2;\n\n      const constructorOptions = {\n        debug: params.debug || false,\n        contextId: this.contextId,\n        host: params.host || 'wss://localhost:2000/mpos',\n      };\n\n      this.__bifrost__ = new BifrostWebSocket(constructorOptions);\n    } catch (error) {\n      logError(error, true);\n    }\n  }\n\n  get connected() {\n    return this.__bifrost__.connected;\n  }\n\n  /**\n   * Initialize the PinPad\n   * @returns {Promise<boolean>}\n   */\n  async initialize() {\n    try {\n      await this.__bifrost__.startWsConnection();\n      await this.__bifrost__.getPinPadDevices();\n      await this.__bifrost__.initialize({ encryptionKey: this.encryptionKey });\n      return Promise.resolve(true);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n\n  /**\n   * Terminate the PinPad\n   * @returns {Promise<Boolean>}\n   */\n  async terminate() {\n    try {\n      if (!this.connected) notConnected();\n      await this.__bifrost__.closePinPadContext();\n      await this.__bifrost__.closeWsConnection();\n      return Promise.resolve(true);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n\n  /**\n   * Get the PinPad Status\n   * @returns {Promise<Object.<BifrostServiceStatus>>}\n   */\n  async status() {\n    try {\n      if (!this.connected) notConnected();\n      return this.__bifrost__.getPinPanStatus();\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n\n  /**\n   * Display a message on the PinPad\n   * @param {string|array} message - A message string or an array of messages.\n   * @returns {Promise<String>}\n   */\n  async showMessage(message) {\n    try {\n      if (!this.connected) notConnected();\n      const tefMaxCharLine = this.pinPadMaxCharLine;\n      const tefMaxChar = this.pinPadMaxChar;\n      let formattedMessage = '';\n\n      if (Array.isArray(message)) {\n        formattedMessage = message\n          .slice(0, this.pinPanDisplayLines)\n          .map(m => addSpaces(m, tefMaxCharLine))\n          .join('');\n      }\n\n      if (typeof message === 'string') {\n        formattedMessage = addSpaces(message, tefMaxChar);\n      }\n\n      await this.__bifrost__.displayMessageOnPinPadScreen(formattedMessage);\n      return Promise.resolve(formattedMessage);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n\n  /**\n   * Start the payment process\n   * @param {number} amount\n   * @param {string|number} method = 'credit'|'debit'|1|2\n   * @returns {Promise<Object.<PinPadProcessedCardReturn>>}\n   */\n  async payment(amount, method) {\n    try {\n      if (!this.connected) notConnected();\n      this.__bifrost__.startPayment({ amount, method });\n      const processedPayment = await this.__bifrost__.startPaymentProcess();\n\n      return Promise.resolve(processedPayment);\n    } catch (error) {\n      logError(error);\n      await this.showMessage(error.text);\n      setTimeout(async () => {\n        await this.finish();\n        await this.terminate();\n        setTimeout(async () => {\n          await this.initialize();\n        }, 2000);\n      }, 2000);\n      return Promise.reject(error);\n    }\n  }\n\n  /**\n   * @typedef {object} PinPadFinishParameters\n   * @property {number} timeout - Timeout in MS between the execution of messages\n   * @property {string|array} messages - An string or an Array of messages\n   * @property {string} code\n   * @property {string} emvData\n   */\n  /**\n   * Finish the PinPad payment process.\n   * @param {PinPadFinishParameters} params\n   * @returns {Promise<*>}\n   */\n  async finish(params = {}) {\n    try {\n      if (!this.connected) notConnected();\n      const code = params.code || '';\n      const emvData = params.emvData || '';\n      const timeOut = params.timeout || 2000;\n      const messages = params.messages || null;\n      const processed = await this.__bifrost__.finishPaymentProcess(code, emvData);\n\n      if (Array.isArray(messages)) {\n        messages.forEach((message, index) => {\n          setTimeout(async () => {\n            await this.showMessage(message);\n          }, timeOut * (index + 1));\n        });\n      }\n\n      if (typeof messages === 'string') {\n        setTimeout(async () => {\n          await this.showMessage(messages);\n        }, timeOut);\n      }\n\n      return Promise.resolve(processed);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n}\n\nexport default PagarMeBifrost;\n"],"names":["NAME","BACKGROUND","required","name","param","undefined","Error","logInfo","msg","console","log","logError","error","addSpaces","text","maxChar","split","concat","Array","fill","slice","join","body","then","result","value","direct","Promise","resolve","f","args","i","arguments","length","apply","this","e","reject","recover","BifrostWebSocket","contextId","baudRate","debug","host","_connected","devices","_host","ws","WebSocketAsPromised","packMessage","data","JSON","stringify","unpackMessage","message","parse","attachRequestId","requestId","Object","assign","request_type","extractRequestId","response_type","_amount","_method","_wsConnected","lastRequest","__response","unknownCommand","devicesListed","initialized","alreadyInitialized","processed","finished","messageDisplayed","status","contextClosed","__request","listDevices","initialize","process","finish","displayMessage","closeContext","__errorContextString","__errorInitialize","__errorOperationErrored","__errorOperationFailed","__errorOperationCanceled","__catastroficError","__paymentMethods","credit","debit","debugLog","_typeof","classError","_this","open","_this2","close","_this3","defineRequest","sendRequest","context_id","responseData","closeWsConnection","_this4","device_list","params","deviceIndex","_this5","startWsConnection","id","sendPacked","device_id","encryption_key","encryptionKey","baud_rate","simple_initialize","simpleInitialize","timeout_milliseconds","timeoutMilliseconds","onMessage","addListener","response","removeAllListeners","closePinPadContext","nextDevice","includes","context","_this6","connected","code","connectedDeviceId","connected_device_id","_this7","display_message","amount","method","_this8","magstripe_payment_method","eventResponse","type","emvData","_this9","success","response_code","emv_data","parseFloat","keys","find","p","k","_this10","notConnected","pinPadMaxCharLine","pinPadMaxChar","pinPanDisplayLines","constructorOptions","__bifrost__","getPinPadDevices","getPinPanStatus","tefMaxCharLine","tefMaxChar","formattedMessage","isArray","map","m","displayMessageOnPinPadScreen","startPayment","startPaymentProcess","processedPayment","showMessage","setTimeout","terminate","timeOut","timeout","messages","finishPaymentProcess","forEach","index"],"mappings":"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"}